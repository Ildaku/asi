#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ "–≤–∏—Å—è—â–∏—Ö" —Å—Å—ã–ª–æ–∫ –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å—ã—Ä—å—ë
"""

from app import app, db
from app.models import MaterialBatch, BatchMaterial, ProductionBatch, ProductionPlan, RawMaterial
from sqlalchemy import text

def cleanup_orphaned_references():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ '–≤–∏—Å—è—â–∏–µ' —Å—Å—ã–ª–∫–∏ –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å—ã—Ä—å—ë"""
    
    with app.app_context():
        print("üîß –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É '–≤–∏—Å—è—â–∏—Ö' —Å—Å—ã–ª–æ–∫...")
        print("=" * 50)
        
        try:
            # 1. –ù–∞—Ö–æ–¥–∏–º MaterialBatch —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å—ã—Ä—å—ë–º
            print("\nüìä –ü–æ–∏—Å–∫ MaterialBatch –±–µ–∑ —Å—ã—Ä—å—è...")
            orphaned_mb = db.session.execute(text("""
                SELECT mb.id, mb.material_id, mb.batch_number, mb.quantity
                FROM material_batches mb
                LEFT JOIN raw_materials rm ON mb.material_id = rm.id
                WHERE rm.id IS NULL
            """)).fetchall()
            
            print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(orphaned_mb)} MaterialBatch –±–µ–∑ —Å—ã—Ä—å—è")
            if orphaned_mb:
                for mb in orphaned_mb:
                    print(f"   - ID: {mb.id}, material_id: {mb.material_id}, –ø–∞—Ä—Ç–∏—è: {mb.batch_number}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {mb.quantity}")
            
            # 2. –ù–∞—Ö–æ–¥–∏–º BatchMaterial —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ MaterialBatch
            print("\nüìä –ü–æ–∏—Å–∫ BatchMaterial –±–µ–∑ MaterialBatch...")
            orphaned_bm = db.session.execute(text("""
                SELECT bm.id, bm.material_batch_id, bm.batch_id, bm.quantity
                FROM batch_materials bm
                LEFT JOIN material_batches mb ON bm.material_batch_id = mb.id
                WHERE mb.id IS NULL
            """)).fetchall()
            
            print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(orphaned_bm)} BatchMaterial –±–µ–∑ MaterialBatch")
            if orphaned_bm:
                for bm in orphaned_bm:
                    print(f"   - ID: {bm.id}, material_batch_id: {bm.material_batch_id}, batch_id: {bm.batch_id}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {bm.quantity}")
            
            # 3. –ù–∞—Ö–æ–¥–∏–º ProductionBatch —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–ª–∞–Ω–∞–º–∏
            print("\nüìä –ü–æ–∏—Å–∫ ProductionBatch –±–µ–∑ –ø–ª–∞–Ω–æ–≤...")
            orphaned_pb = db.session.execute(text("""
                SELECT pb.id, pb.plan_id, pb.batch_number, pb.weight
                FROM production_batches pb
                LEFT JOIN production_plans pp ON pb.plan_id = pp.id
                WHERE pp.id IS NULL
            """)).fetchall()
            
            print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(orphaned_pb)} ProductionBatch –±–µ–∑ –ø–ª–∞–Ω–æ–≤")
            if orphaned_pb:
                for pb in orphaned_pb:
                    print(f"   - ID: {pb.id}, plan_id: {pb.plan_id}, –ø–∞—Ä—Ç–∏—è: {pb.batch_number}, –≤–µ—Å: {pb.weight}")
            
            # 4. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º
            total_problems = len(orphaned_mb) + len(orphaned_bm) + len(orphaned_pb)
            
            if total_problems == 0:
                print("\nüéâ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ! –í—Å–µ —Å—Å—ã–ª–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")
                return
            
            print(f"\n‚ö†Ô∏è  –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {total_problems}")
            
            # 5. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            print("\n" + "=" * 50)
            print("üö® –í–ù–ò–ú–ê–ù–ò–ï! –°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!")
            print("=" * 50)
            
            confirm = input(f"\n–£–¥–∞–ª–∏—Ç—å {total_problems} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π? (yes/no): ").strip().lower()
            
            if confirm != 'yes':
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return
            
            # 6. –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
            print("\nüßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É...")
            
            # –£–¥–∞–ª—è–µ–º BatchMaterial —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ MaterialBatch
            if orphaned_bm:
                print(f"   –£–¥–∞–ª—è—é {len(orphaned_bm)} BatchMaterial...")
                for bm in orphaned_bm:
                    db.session.execute(text("DELETE FROM batch_materials WHERE id = :id"), {"id": bm.id})
                print("   ‚úÖ BatchMaterial –æ—á–∏—â–µ–Ω—ã")
            
            # –£–¥–∞–ª—è–µ–º MaterialBatch —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å—ã—Ä—å—ë–º
            if orphaned_mb:
                print(f"   –£–¥–∞–ª—è—é {len(orphaned_mb)} MaterialBatch...")
                for mb in orphaned_mb:
                    db.session.execute(text("DELETE FROM material_batches WHERE id = :id"), {"id": mb.id})
                print("   ‚úÖ MaterialBatch –æ—á–∏—â–µ–Ω—ã")
            
            # –£–¥–∞–ª—è–µ–º ProductionBatch —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–ª–∞–Ω–∞–º–∏
            if orphaned_pb:
                print(f"   –£–¥–∞–ª—è—é {len(orphaned_pb)} ProductionBatch...")
                for pb in orphaned_pb:
                    db.session.execute(text("DELETE FROM production_batches WHERE id = :id"), {"id": pb.id})
                print("   ‚úÖ ProductionBatch –æ—á–∏—â–µ–Ω—ã")
            
            # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.session.commit()
            print(f"\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"   –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_problems}")
            
            # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print("\nüîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
            remaining_mb = db.session.execute(text("""
                SELECT COUNT(*) FROM material_batches mb
                LEFT JOIN raw_materials rm ON mb.material_id = rm.id
                WHERE rm.id IS NULL
            """)).scalar()
            
            remaining_bm = db.session.execute(text("""
                SELECT COUNT(*) FROM batch_materials bm
                LEFT JOIN material_batches mb ON bm.material_batch_id = mb.id
                WHERE mb.id IS NULL
            """)).scalar()
            
            remaining_pb = db.session.execute(text("""
                SELECT COUNT(*) FROM production_batches pb
                LEFT JOIN production_plans pp ON pb.plan_id = pp.id
                WHERE pp.id IS NULL
            """)).scalar()
            
            print(f"   –û—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º: {remaining_mb + remaining_bm + remaining_pb}")
            
            if remaining_mb + remaining_bm + remaining_pb == 0:
                print("   ‚úÖ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã!")
            else:
                print("   ‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
            print("   –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã (rollback)")

def check_current_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º"""
    
    with app.app_context():
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞...")
        print("=" * 30)
        
        try:
            # MaterialBatch –±–µ–∑ —Å—ã—Ä—å—è
            orphaned_mb = db.session.execute(text("""
                SELECT COUNT(*) FROM material_batches mb
                LEFT JOIN raw_materials rm ON mb.material_id = rm.id
                WHERE rm.id IS NULL
            """)).scalar()
            
            # BatchMaterial –±–µ–∑ MaterialBatch
            orphaned_bm = db.session.execute(text("""
                SELECT COUNT(*) FROM batch_materials bm
                LEFT JOIN material_batches mb ON bm.material_batch_id = mb.id
                WHERE mb.id IS NULL
            """)).scalar()
            
            # ProductionBatch –±–µ–∑ –ø–ª–∞–Ω–æ–≤
            orphaned_pb = db.session.execute(text("""
                SELECT COUNT(*) FROM production_batches pb
                LEFT JOIN production_plans pp ON pb.plan_id = pp.id
                WHERE pp.id IS NULL
            """)).scalar()
            
            total = orphaned_mb + orphaned_bm + orphaned_pb
            
            print(f"MaterialBatch –±–µ–∑ —Å—ã—Ä—å—è: {orphaned_mb}")
            print(f"BatchMaterial –±–µ–∑ MaterialBatch: {orphaned_bm}")
            print(f"ProductionBatch –±–µ–∑ –ø–ª–∞–Ω–æ–≤: {orphaned_pb}")
            print(f"–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {total}")
            
            if total == 0:
                print("üéâ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
            else:
                print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –æ—á–∏—Å—Ç–∫–∏")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ '–≤–∏—Å—è—â–∏—Ö' —Å—Å—ã–ª–æ–∫")
    print("=" * 40)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å")
        print("2. –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É")
        print("3. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è (1-3): ").strip()
        
        if choice == "1":
            check_current_status()
        elif choice == "2":
            cleanup_orphaned_references()
        elif choice == "3":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3")

if __name__ == '__main__':
    main() 